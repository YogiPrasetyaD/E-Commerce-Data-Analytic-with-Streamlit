# -*- coding: utf-8 -*-
"""Proyek Analisis Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iej8cq6M4Hdx_259varRIjjDiDExt9b9

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** I Putu Yogi Prasetya Dharmawan
- **Email:** yogidharmawan6@gmail.com
- **ID Dicoding:** yogiprasetyad

## Menentukan Pertanyaan Bisnis

- Pertanyaan 1 : Produk apakah yang paling banyak terjual di suatu Kota
- Pertanyaan 2 : Kota mana yang paling banyak membeli suatu produk
- Pertanyaan 3: Produk apakah yang paling banyak terjual dan paling sedikit terjual
- Pertanyaan 4: Bagaimanakah Tren Penjualan Produk setiap Bulannya
- Pertanyaan 5: Bagaimanakah Tren Pendapatan setiap Bulannya

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

#Memuat Data Customer dari E-Commerce
customers_df = pd.read_csv("https://raw.githubusercontent.com/YogiPrasetyaD/PublicDatasets/main/E-Commerce%20Public%20Dataset/customers_dataset.csv")
customers_df.head()

#Memuat Data Geo Lokasi
geo_df = pd.read_csv("https://raw.githubusercontent.com/YogiPrasetyaD/PublicDatasets/main/E-Commerce%20Public%20Dataset/geolocation_dataset.csv")
geo_df.head()

#Memuat Data Order Item
order_items_df = pd.read_csv("https://raw.githubusercontent.com/YogiPrasetyaD/PublicDatasets/main/E-Commerce%20Public%20Dataset/order_items_dataset.csv")
order_items_df.head()

#Memuat Data Order Payment
order_payment_df = pd.read_csv("https://raw.githubusercontent.com/YogiPrasetyaD/PublicDatasets/main/E-Commerce%20Public%20Dataset/order_payments_dataset.csv")
order_payment_df.head()

#Memuat Data Order_review
order_review_df = pd.read_csv("https://raw.githubusercontent.com/YogiPrasetyaD/PublicDatasets/main/E-Commerce%20Public%20Dataset/order_reviews_dataset.csv")
order_review_df.head()

#Memuat Order
order_df = pd.read_csv("https://raw.githubusercontent.com/YogiPrasetyaD/PublicDatasets/main/E-Commerce%20Public%20Dataset/orders_dataset.csv")
order_df.head()

#Memuat Product Category
product_category_df = pd.read_csv("https://raw.githubusercontent.com/YogiPrasetyaD/PublicDatasets/main/E-Commerce%20Public%20Dataset/product_category_name_translation.csv")
product_category_df.head()

#Memuat Product Dataset
product_df = pd.read_csv("https://raw.githubusercontent.com/YogiPrasetyaD/PublicDatasets/main/E-Commerce%20Public%20Dataset/products_dataset.csv")
product_df.head()

#Memuat sellers
sellers_df = pd.read_csv("https://raw.githubusercontent.com/YogiPrasetyaD/PublicDatasets/main/E-Commerce%20Public%20Dataset/sellers_dataset.csv")
sellers_df.head()

"""### Assessing Data"""

#Memeriksa Anatomi dari customer Dataset
customers_df.info()

#Memeriksa nilai null pada customer Dataset
print(f"Jumlah Null Pada Dataset :\n{customers_df.isna().sum()}")

#Memeriksa nilai Duplikat pada customer Dataset
print(f"Jumlah Duplikat Pada Dataset : {customers_df.duplicated().sum()}")

#Memeriksa Anatomi dari Geolocation Dataset
geo_df.info()

#Memeriksa nilai null pada Geolocation Dataset
print(f"Jumlah Null Pada Dataset :\n{geo_df.isna().sum()}")

#Memeriksa nilai Duplikat pada Geolocation Dataset
print(f"Jumlah Duplikat Pada Dataset : {geo_df.duplicated().sum()}")

#Memeriksa Anatomi dari Order Item Dataset
order_items_df.info() #janggal di shipping limit datenya mengenai datatype

#Memeriksa nilai null pada Order Item Dataset
print(f"Jumlah Null Pada Dataset :\n{order_items_df.isna().sum()}")

#Memeriksa nilai Duplikat pada Order Item Dataset
print(f"Jumlah Duplikat Pada Dataset : {order_items_df.duplicated().sum()}")

#Memeriksa Anatomi dari Order Payment Dataset
order_payment_df.info()

#Memeriksa nilai null pada Order Payment Dataset
print(f"Jumlah Null Pada Dataset :\n{order_payment_df.isna().sum()}")

#Memeriksa nilai Duplikat pada Order Payment Dataset
print(f"Jumlah Duplikat Pada Dataset : {order_payment_df.duplicated().sum()}")

#Memeriksa Anatomi dari Order Review Dataset
order_review_df.info()

#Memeriksa nilai null pada Order Review Dataset
print(f"Jumlah Null Pada Dataset :\n{order_review_df.isna().sum()}")

#Memeriksa nilai Duplikat pada Order Review Dataset
print(f"Jumlah Duplikat Pada Dataset : {order_review_df.duplicated().sum()}")

#Memeriksa Anatomi dari Order Dataset
order_df.info()

#Memeriksa nilai null pada Order Dataset
print(f"Jumlah Null Pada Dataset :\n{order_df.isna().sum()}")

#Memeriksa nilai Duplikat pada Order Dataset
print(f"Jumlah Duplikat Pada Dataset : {order_df.duplicated().sum()}")

#Memeriksa Anatomi dari Product Category Dataset
product_category_df.info()

#Memeriksa nilai null pada Product Category Dataset
print(f"Jumlah Null Pada Dataset :\n{product_category_df.isna().sum()}")

#Memeriksa nilai Duplikat pada Product Category Dataset
print(f"Jumlah Duplikat Pada Dataset : {product_category_df.duplicated().sum()}")

#Memeriksa Anatomi dari Product Dataset
product_df.info()

#Memeriksa nilai null pada Product Dataset
print(f"Jumlah Null Pada Dataset :\n{product_df.isna().sum()}")

#Memeriksa nilai Duplikat pada Product Dataset
print(f"Jumlah Duplikat Pada Dataset : {product_df.duplicated().sum()}")

#Memeriksa Anatomi dari Seller Dataset
sellers_df.info()

#Memeriksa nilai null pada Seller Dataset
print(f"Jumlah Null Pada Dataset :\n{sellers_df.isna().sum()}")

#Memeriksa nilai Duplikat pada Seller Dataset
print(f"Jumlah Duplikat Pada Dataset : {sellers_df.duplicated().sum()}")

"""### Cleaning Data"""

#Mmebersihkan Geo_df

geo_df.drop_duplicates(inplace=True)
print(f"Jumlah Data Duplikat adalah : {geo_df.duplicated().sum()}")

#Membersihkan Order Review

#1. Mengubah Datatype Creation Date dan Timestamp dari objek ke Datetime
datetime_columns = ["review_creation_date", "review_answer_timestamp"]
for column in datetime_columns:
  order_review_df[column] = pd.to_datetime(order_review_df[column])

#2 Mengganti Null Comment Title dengan Tidak Ada Judul
order_review_df["review_comment_title"].value_counts()
order_review_df["review_comment_title"].fillna("Tidak Ada Judul", inplace=True)

#3 Mengganti Null Comment Message dengan Tidak ada Komentar
order_review_df["review_comment_message"].fillna("Tidak Ada Komentar", inplace=True)

order_review_df.info()

#Membersihkan Order Dataset

#1. Mengganti Datatype menjadi datetime
datetime = ["order_purchase_timestamp", "order_approved_at", "order_delivered_carrier_date", "order_delivered_customer_date", "order_estimated_delivery_date"]
for columns in datetime:
  order_df[columns] = pd.to_datetime(order_df[columns])

order_df.info()

#Membersihkan Data Product
product_df.info()

#1. Mengisi Kolom Numerik yang null dnegan Mean
numeric_col = ["product_weight_g", "product_length_cm", "product_height_cm", "product_width_cm"]
for col in numeric_col:
  mean = product_df[col].mean()
  product_df[col].fillna(mean, inplace=True)



"""## Exploratory Data Analysis (EDA)

### Explore ...
"""

#Menggabungkan data product yang terjual pada order item berdasarkan product id
orderitems_product_df = pd.merge(
    left = order_items_df,
    right = product_df,
    how = "left",
    left_on = "product_id",
    right_on = "product_id"
)

orderitems_product_df.head()

#Menggabungkan data customer yang membeli pada order berdasarkan customer id id
order_customer_df = pd.merge(
    left= order_df,
    right = customers_df,
    how = "left",
    left_on = "customer_id",
    right_on = "customer_id"
)

order_customer_df.head()

#Menggabungkan data product yang terjual pada order item dan customer yang membeli product
all_df = pd.merge(
    left = orderitems_product_df,
    right = order_customer_df,
    how ="left",
    left_on = "order_id",
    right_on = "order_id"
)

all_df.head()

"""## Visualization & Explanatory Analysis

### Pertanyaan 1: Produk apakah yang paling banyak terjual di suatu Kota
"""

#Melihat Kategori Product yang paling banyak terjual di suatu kota

by_category_df = all_df.groupby(by=["product_category_name", "customer_city"]).agg({
    "order_id" : "nunique",
    "order_item_id" : "sum",
    "price" : "sum",
}).sort_values(by="order_item_id", ascending=False)

by_category_df.rename(columns={
    "order_id" : "Order Count",
    "order_item_id" : "Item",
    "price" : "Total Price",
},inplace=True)

print(by_category_df.head(),"\n")
fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(24, 6))

color = ["#72BCD4", "#72BCD4", "#72BCD4", "#72BCD4", "#72BCD4"]

# Menambahkan informasi kota ke dalam label sumbu-y
sns.barplot(x="Item", y="product_category_name", hue="customer_city", data=by_category_df.head(5), palette=color, dodge=False)
ax.set_ylabel("Product Category - Customer City", fontsize=12)  # Mengubah label sumbu-y
ax.set_xlabel("Number of Items", fontsize=12)
ax.set_title("Best Product Category Sold by City", loc="center", fontsize=15)
ax.tick_params(axis='y', labelsize=12)
ax.legend(title="City", loc="upper right", bbox_to_anchor=(1.1, 1))  # Menambahkan legenda
plt.tight_layout()  # Memastikan tata letak plot yang baik
plt.show()

"""### Pertanyaan 2: Kota mana yang paling banyak membeli suatu produk"""

#Melihat Customer yang paling banyak membeli product di suatu kota

by_customer_df = all_df.groupby(by=["customer_city"]).agg({
    "order_id" : "nunique",
    "order_item_id" : "sum",
    "price" : "sum",
}).sort_values(by="order_item_id", ascending=False)

by_customer_df.rename(columns={
    "order_id" : "Order Count",
    "order_item_id" : "Item",
    "price" : "Total Price",
},inplace=True)

print(by_customer_df.head(),"\n")
fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(24, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]
# Menampilkan 5 kota dengan jumlah item terbanyak
sns.barplot(x="Item", y="customer_city", data=by_customer_df.head(5), palette=colors)
ax.set_ylabel("Customer City", fontsize=12)  # Mengubah label sumbu-y
ax.set_xlabel("Number of Items", fontsize=12)
ax.set_title("Most Order in a City", loc="center", fontsize=15)
ax.tick_params(axis='y', labelsize=12)
plt.tight_layout()  # Memastikan tata letak plot yang baik
plt.show()

"""### Pertanyaan 3: Produk apakah yang paling banyak terjual dan paling sedikit terjual"""

#Memperlihatkan Produk yang sering terjual dsn jarang Terjual

all_order_df= all_df.groupby(by="product_category_name").order_item_id.sum().sort_values(ascending=False).reset_index()
print(all_order_df.head(5),"\n")
print(all_order_df.sort_values(by="order_item_id", ascending=True).head(5),"\n")

fig, ax = plt.subplots(nrows = 1, ncols=2, figsize=(24,6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="order_item_id", y="product_category_name", data=all_order_df.head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel("")
ax[0].set_xlabel("")
ax[0].set_title("Best Performing Product", loc="center", fontsize=15)
ax[0].tick_params(axis ='y', labelsize=12)

sns.barplot(x="order_item_id", y="product_category_name", data=all_order_df.sort_values(by="order_item_id",ascending=True).head(5),palette=colors, ax=ax[1])
ax[1].set_ylabel("")
ax[1].set_xlabel("")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Performing Product", loc="center", fontsize=15)
ax[1].tick_params(axis ='y', labelsize=12)

"""### Pertanyaan 4: Bagaimanakah Tren Penjualan Produk setiap Bulannya"""

# Ekstrak tahun dari kolom order_purchase_timestamp
all_df['Year'] = all_df['order_purchase_timestamp'].dt.year
all_df['Month'] = all_df['order_purchase_timestamp'].dt.month

# Pengelompokkan data berdasarkan tahun dan bulan dan hitung total order item untuk setiap bulan dan tahun
monthly_order_items = all_df.groupby(['Year','Month'])['order_item_id'].sum().reset_index()

# Plot tren penjualan setiap bulan untuk setiap tahun
plt.figure(figsize=(12, 6))
sns.lineplot(data=monthly_order_items, x='Month', y='order_item_id', hue='Year', marker='o')
plt.title('Tren Penjualan Barang')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Order Item')
plt.xticks(range(1, 13), calendar.month_name[1:13], rotation=45)
plt.legend(title='Year')
plt.grid(True)
plt.tight_layout()
plt.show()

"""### Pertanyaan 5: Bagaimanakah Tren Pendapatan setiap Bulannya"""

import calendar
# Ekstrak tahun dan bulan dari kolom order_purchase_timestamp
all_df['Year'] = all_df['order_purchase_timestamp'].dt.year
all_df['Month'] = all_df['order_purchase_timestamp'].dt.month

# Pengelompokkan data berdasarkan bulan dan tahun dan hitung total pendapatan penjualan untuk setiap bulan dan tahun
monthly_revenue = all_df.groupby(['Year', 'Month'])['price'].sum().reset_index()

# Plot tren penjualan setiap bulan dan tahun
plt.figure(figsize=(12, 6))
sns.lineplot(data=monthly_revenue, x='Month', y='price', hue='Year', marker='o')
plt.title('Tren Pendapatan Bulanan')
plt.xlabel('Bulan')
plt.ylabel('Revenue')
plt.xticks(range(1, 13), calendar.month_name[1:13], rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

all_df.to_csv("all_data.csv", index=False)

"""## Conclusion

**Pertanyaan 1 : Produk apakah yang paling banyak terjual di suatu Kota**
- Terdapat Top 5 produk yang terjual dengan nama kategori yaitu cama mesa banho, beleza saude, informatica accessoris,  moveis decoracao, dan utilidades domesticas. Produk produk tersbut terjual di kota yang sama yaitu sao paulo, hal ini juga dapat disimpulkan bahwa sao paulo merupakan kota terbanyak yang memakai produk tersbut


**Pertanyaan 2 : Kota mana yang paling banyak membeli suatu produk**
- Terdapat 5 kota terbanyak yang membeli suatu produk yaitu curitiba, brasilia, belohorizonte, rio de janeiro, dn yang paling terbanyak tentunya adalah **sao paulo**.


**Pertanyaan 3: Produk apakah yang paling banyak terjual dan paling sedikit terjual**
- Dilihat pada grafik produk yang paling banyak diminati oleh customer yaitu cama mesa banho, dan yang paling sedikit diminati yaitu seguros e servicos.

**Pertanyaan 4: Bagaimanakah Tren Penjualan Produk setiap Bulannya**
- Jika dilihat dari grafik, penjualan produk mengalami kenaikan yang signifikan di tahun 2016 menuju 2017 dan stagnan memasuki tahun 2018


**Pertanyaan 5: Bagaimanakah Tren Pendapatan setiap Bulannya**
- Jika dilihat dari grafik, pendapatan dari penjualan produk mengalami kenaikan yang signifikan di tahun 2016 menuju 2017 dan stagnan memasuki tahun 2018. Hal ini sejalan dengan banyaknya produk yang terjual jika dilihat dari tren penjualan produk.
"""